//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.PSDKInterfaces
{
    [Serializable]
    public class FlightAnomalyMsg : Message
    {
        public const string k_RosMessageName = "PSDKInterfaces/FlightAnomaly";
        public override string RosMessageName => k_RosMessageName;

        public Std.HeaderMsg header;
        public uint impact_in_air;
        //  0: No impact,                      1: _impact happens in Air 
        public uint random_fly;
        //  0: Normal,                         1: Randomly fly in GPS mode without stick input
        public uint height_ctrl_fail;
        //  0: Height control normal,          1: Height control failed 
        public uint roll_pitch_ctrl_fail;
        //  0: Tilt control normal,            1: Tilt control failed 
        public uint yaw_ctrl_fail;
        //  0: Yaw control normal,             1: Yaw control failed 
        public uint aircraft_is_falling;
        //  0: Aircraft is not falling,        1: Aircraft is falling 
        public uint strong_wind_level1;
        //  0: wind is under big wind level 1, 1: wind is stronger than  big wind level 1
        public uint strong_wind_level2;
        //  0: wind is under big wind level 2, 1: wind is stronger than  big wind level 2
        public uint compass_installation_error;
        //  0: Compass install right,          1: Compass install error 
        public uint imu_installation_error;
        //  0: IMU install right,              1: IMU install error 
        public uint esc_temperature_high;
        //  0: ESC temperature is normal,      1: ESC temperature is high 
        public uint at_least_one_esc_disconnected;
        //  0: No ESC disconnected,            1: At least one ESC is disconnected 
        public uint gps_yaw_error;
        //  0: No GPS yaw error,               1: GPS yaw error 
        public uint reserved;

        public FlightAnomalyMsg()
        {
            this.header = new Std.HeaderMsg();
            this.impact_in_air = 0;
            this.random_fly = 0;
            this.height_ctrl_fail = 0;
            this.roll_pitch_ctrl_fail = 0;
            this.yaw_ctrl_fail = 0;
            this.aircraft_is_falling = 0;
            this.strong_wind_level1 = 0;
            this.strong_wind_level2 = 0;
            this.compass_installation_error = 0;
            this.imu_installation_error = 0;
            this.esc_temperature_high = 0;
            this.at_least_one_esc_disconnected = 0;
            this.gps_yaw_error = 0;
            this.reserved = 0;
        }

        public FlightAnomalyMsg(Std.HeaderMsg header, uint impact_in_air, uint random_fly, uint height_ctrl_fail, uint roll_pitch_ctrl_fail, uint yaw_ctrl_fail, uint aircraft_is_falling, uint strong_wind_level1, uint strong_wind_level2, uint compass_installation_error, uint imu_installation_error, uint esc_temperature_high, uint at_least_one_esc_disconnected, uint gps_yaw_error, uint reserved)
        {
            this.header = header;
            this.impact_in_air = impact_in_air;
            this.random_fly = random_fly;
            this.height_ctrl_fail = height_ctrl_fail;
            this.roll_pitch_ctrl_fail = roll_pitch_ctrl_fail;
            this.yaw_ctrl_fail = yaw_ctrl_fail;
            this.aircraft_is_falling = aircraft_is_falling;
            this.strong_wind_level1 = strong_wind_level1;
            this.strong_wind_level2 = strong_wind_level2;
            this.compass_installation_error = compass_installation_error;
            this.imu_installation_error = imu_installation_error;
            this.esc_temperature_high = esc_temperature_high;
            this.at_least_one_esc_disconnected = at_least_one_esc_disconnected;
            this.gps_yaw_error = gps_yaw_error;
            this.reserved = reserved;
        }

        public static FlightAnomalyMsg Deserialize(MessageDeserializer deserializer) => new FlightAnomalyMsg(deserializer);

        private FlightAnomalyMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.impact_in_air);
            deserializer.Read(out this.random_fly);
            deserializer.Read(out this.height_ctrl_fail);
            deserializer.Read(out this.roll_pitch_ctrl_fail);
            deserializer.Read(out this.yaw_ctrl_fail);
            deserializer.Read(out this.aircraft_is_falling);
            deserializer.Read(out this.strong_wind_level1);
            deserializer.Read(out this.strong_wind_level2);
            deserializer.Read(out this.compass_installation_error);
            deserializer.Read(out this.imu_installation_error);
            deserializer.Read(out this.esc_temperature_high);
            deserializer.Read(out this.at_least_one_esc_disconnected);
            deserializer.Read(out this.gps_yaw_error);
            deserializer.Read(out this.reserved);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.impact_in_air);
            serializer.Write(this.random_fly);
            serializer.Write(this.height_ctrl_fail);
            serializer.Write(this.roll_pitch_ctrl_fail);
            serializer.Write(this.yaw_ctrl_fail);
            serializer.Write(this.aircraft_is_falling);
            serializer.Write(this.strong_wind_level1);
            serializer.Write(this.strong_wind_level2);
            serializer.Write(this.compass_installation_error);
            serializer.Write(this.imu_installation_error);
            serializer.Write(this.esc_temperature_high);
            serializer.Write(this.at_least_one_esc_disconnected);
            serializer.Write(this.gps_yaw_error);
            serializer.Write(this.reserved);
        }

        public override string ToString()
        {
            return "FlightAnomalyMsg: " +
            "\nheader: " + header.ToString() +
            "\nimpact_in_air: " + impact_in_air.ToString() +
            "\nrandom_fly: " + random_fly.ToString() +
            "\nheight_ctrl_fail: " + height_ctrl_fail.ToString() +
            "\nroll_pitch_ctrl_fail: " + roll_pitch_ctrl_fail.ToString() +
            "\nyaw_ctrl_fail: " + yaw_ctrl_fail.ToString() +
            "\naircraft_is_falling: " + aircraft_is_falling.ToString() +
            "\nstrong_wind_level1: " + strong_wind_level1.ToString() +
            "\nstrong_wind_level2: " + strong_wind_level2.ToString() +
            "\ncompass_installation_error: " + compass_installation_error.ToString() +
            "\nimu_installation_error: " + imu_installation_error.ToString() +
            "\nesc_temperature_high: " + esc_temperature_high.ToString() +
            "\nat_least_one_esc_disconnected: " + at_least_one_esc_disconnected.ToString() +
            "\ngps_yaw_error: " + gps_yaw_error.ToString() +
            "\nreserved: " + reserved.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
