//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.PSDKInterfaces
{
    [Serializable]
    public class GimbalStatusMsg : Message
    {
        public const string k_RosMessageName = "PSDKInterfaces/GimbalStatus";
        public override string RosMessageName => k_RosMessageName;

        public Std.HeaderMsg header;
        public uint mount_status;
        //  1 - gimbal mounted, 0 - gimbal not mounted
        public uint is_busy;
        public uint pitch_limited;
        //  1 - axis reached limit, 0 - no 
        public uint roll_limited;
        //  1 - axis reached limit, 0 - no 
        public uint yaw_limited;
        //  1 - axis reached limit, 0 - no 
        public uint calibrating;
        //  1 - calibrating, 0 - no 
        public uint prev_calibration_result;
        //  1 - success, 0 - fail 
        public uint installed_direction;
        //  1 - reversed for OSMO, 0 - normal 
        public uint disabled_mvo;
        public uint gear_show_unable;
        public uint gyro_falut;
        //  1 - fault, 0 - normal 
        public uint esc_pitch_status;
        //  1 - Pitch data is normal, 0 - fault 
        public uint esc_roll_status;
        //  1 - Roll data is normal, 0 - fault 
        public uint esc_yaw_status;
        //  1 - Yaw data is normal , 0 - fault 
        public uint drone_data_recv;
        //  1 - normal , 0 - at fault 
        public uint init_unfinished;
        //  1 - init complete, 0 - not complete 
        public uint fw_updating;
        //  1 - updating, 0 - not updating 

        public GimbalStatusMsg()
        {
            this.header = new Std.HeaderMsg();
            this.mount_status = 0;
            this.is_busy = 0;
            this.pitch_limited = 0;
            this.roll_limited = 0;
            this.yaw_limited = 0;
            this.calibrating = 0;
            this.prev_calibration_result = 0;
            this.installed_direction = 0;
            this.disabled_mvo = 0;
            this.gear_show_unable = 0;
            this.gyro_falut = 0;
            this.esc_pitch_status = 0;
            this.esc_roll_status = 0;
            this.esc_yaw_status = 0;
            this.drone_data_recv = 0;
            this.init_unfinished = 0;
            this.fw_updating = 0;
        }

        public GimbalStatusMsg(Std.HeaderMsg header, uint mount_status, uint is_busy, uint pitch_limited, uint roll_limited, uint yaw_limited, uint calibrating, uint prev_calibration_result, uint installed_direction, uint disabled_mvo, uint gear_show_unable, uint gyro_falut, uint esc_pitch_status, uint esc_roll_status, uint esc_yaw_status, uint drone_data_recv, uint init_unfinished, uint fw_updating)
        {
            this.header = header;
            this.mount_status = mount_status;
            this.is_busy = is_busy;
            this.pitch_limited = pitch_limited;
            this.roll_limited = roll_limited;
            this.yaw_limited = yaw_limited;
            this.calibrating = calibrating;
            this.prev_calibration_result = prev_calibration_result;
            this.installed_direction = installed_direction;
            this.disabled_mvo = disabled_mvo;
            this.gear_show_unable = gear_show_unable;
            this.gyro_falut = gyro_falut;
            this.esc_pitch_status = esc_pitch_status;
            this.esc_roll_status = esc_roll_status;
            this.esc_yaw_status = esc_yaw_status;
            this.drone_data_recv = drone_data_recv;
            this.init_unfinished = init_unfinished;
            this.fw_updating = fw_updating;
        }

        public static GimbalStatusMsg Deserialize(MessageDeserializer deserializer) => new GimbalStatusMsg(deserializer);

        private GimbalStatusMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.mount_status);
            deserializer.Read(out this.is_busy);
            deserializer.Read(out this.pitch_limited);
            deserializer.Read(out this.roll_limited);
            deserializer.Read(out this.yaw_limited);
            deserializer.Read(out this.calibrating);
            deserializer.Read(out this.prev_calibration_result);
            deserializer.Read(out this.installed_direction);
            deserializer.Read(out this.disabled_mvo);
            deserializer.Read(out this.gear_show_unable);
            deserializer.Read(out this.gyro_falut);
            deserializer.Read(out this.esc_pitch_status);
            deserializer.Read(out this.esc_roll_status);
            deserializer.Read(out this.esc_yaw_status);
            deserializer.Read(out this.drone_data_recv);
            deserializer.Read(out this.init_unfinished);
            deserializer.Read(out this.fw_updating);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.mount_status);
            serializer.Write(this.is_busy);
            serializer.Write(this.pitch_limited);
            serializer.Write(this.roll_limited);
            serializer.Write(this.yaw_limited);
            serializer.Write(this.calibrating);
            serializer.Write(this.prev_calibration_result);
            serializer.Write(this.installed_direction);
            serializer.Write(this.disabled_mvo);
            serializer.Write(this.gear_show_unable);
            serializer.Write(this.gyro_falut);
            serializer.Write(this.esc_pitch_status);
            serializer.Write(this.esc_roll_status);
            serializer.Write(this.esc_yaw_status);
            serializer.Write(this.drone_data_recv);
            serializer.Write(this.init_unfinished);
            serializer.Write(this.fw_updating);
        }

        public override string ToString()
        {
            return "GimbalStatusMsg: " +
            "\nheader: " + header.ToString() +
            "\nmount_status: " + mount_status.ToString() +
            "\nis_busy: " + is_busy.ToString() +
            "\npitch_limited: " + pitch_limited.ToString() +
            "\nroll_limited: " + roll_limited.ToString() +
            "\nyaw_limited: " + yaw_limited.ToString() +
            "\ncalibrating: " + calibrating.ToString() +
            "\nprev_calibration_result: " + prev_calibration_result.ToString() +
            "\ninstalled_direction: " + installed_direction.ToString() +
            "\ndisabled_mvo: " + disabled_mvo.ToString() +
            "\ngear_show_unable: " + gear_show_unable.ToString() +
            "\ngyro_falut: " + gyro_falut.ToString() +
            "\nesc_pitch_status: " + esc_pitch_status.ToString() +
            "\nesc_roll_status: " + esc_roll_status.ToString() +
            "\nesc_yaw_status: " + esc_yaw_status.ToString() +
            "\ndrone_data_recv: " + drone_data_recv.ToString() +
            "\ninit_unfinished: " + init_unfinished.ToString() +
            "\nfw_updating: " + fw_updating.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
