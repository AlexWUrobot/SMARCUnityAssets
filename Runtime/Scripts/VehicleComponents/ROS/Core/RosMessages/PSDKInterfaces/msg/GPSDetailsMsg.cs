//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.PsdkInterfaces
{
    [Serializable]
    public class GPSDetailsMsg : Message
    {
        public const string k_RosMessageName = "psdk_interfaces/GPSDetails";
        public override string RosMessageName => k_RosMessageName;

        public Std.HeaderMsg header;
        public float horizontal_dop;
        //  Horizontal dilution of precision, unit: 0.01, eg: 100 = 1.00, <1: ideal, 1-2: excellent, 2-5: good, 5-10: moderate, 10-20: fair, >20: poor.
        public float position_dop;
        //  Position dilution of precision, unit: 0.01, eg: 100 = 1.00, <1: ideal, 1-2: excellent, 2-5: good, 5-10: moderate, 10-20: fair, >20: poor.
        public const ushort GPS_FIX_STATE_NO_FIX = 0; //  GPS position has not been fixed.
        public const ushort GPS_FIX_STATE_DEAD_RECKONING_ONLY = 1; //  GPS position is dead reckoned only.
        public const ushort GPS_FIX_STATE_2D_FIX = 2; //  The horizontal position with latitude/longitude (or northing/easting or X/Y) is fixed.
        public const ushort GPS_FIX_STATE_3D_FIX = 3; //  The horizontal and vertical position with latitude/longitude/altitude (northing/easting/altitude or X/Y/Z) is fixed.
        public const ushort GPS_FIX_STATE_GPS_PLUS_DEAD_RECKONING = 4; //  Position is calculated by GPS and combined with dead reckoning.
        public const ushort GPS_FIX_STATE_TIME_ONLY_FIX = 5; //  Only time is fixed.
        public float fix_state;
        public float vertical_accuracy;
        //  Vertical position accuracy (mm), the smaller, the better.
        public float horizontal_accuracy;
        //  Horizontal position accuracy (mm), the smaller, the better.
        public float speed_accuracy;
        //  Speed accuracy (cm/s), the smaller, the better.
        public uint num_gps_satellites_used;
        //  Number of GPS satellites used for fixing position.
        public uint num_glonass_satellites_used;
        //  Number of GLONASS satellites used for fixing position.
        public ushort num_total_satellites_used;
        //  Total number of satellites used for fixing position.
        public ushort gps_counter;
        //  Accumulated times of sending GPS data.

        public GPSDetailsMsg()
        {
            this.header = new Std.HeaderMsg();
            this.horizontal_dop = 0.0f;
            this.position_dop = 0.0f;
            this.fix_state = 0.0f;
            this.vertical_accuracy = 0.0f;
            this.horizontal_accuracy = 0.0f;
            this.speed_accuracy = 0.0f;
            this.num_gps_satellites_used = 0;
            this.num_glonass_satellites_used = 0;
            this.num_total_satellites_used = 0;
            this.gps_counter = 0;
        }

        public GPSDetailsMsg(Std.HeaderMsg header, float horizontal_dop, float position_dop, float fix_state, float vertical_accuracy, float horizontal_accuracy, float speed_accuracy, uint num_gps_satellites_used, uint num_glonass_satellites_used, ushort num_total_satellites_used, ushort gps_counter)
        {
            this.header = header;
            this.horizontal_dop = horizontal_dop;
            this.position_dop = position_dop;
            this.fix_state = fix_state;
            this.vertical_accuracy = vertical_accuracy;
            this.horizontal_accuracy = horizontal_accuracy;
            this.speed_accuracy = speed_accuracy;
            this.num_gps_satellites_used = num_gps_satellites_used;
            this.num_glonass_satellites_used = num_glonass_satellites_used;
            this.num_total_satellites_used = num_total_satellites_used;
            this.gps_counter = gps_counter;
        }

        public static GPSDetailsMsg Deserialize(MessageDeserializer deserializer) => new GPSDetailsMsg(deserializer);

        private GPSDetailsMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.horizontal_dop);
            deserializer.Read(out this.position_dop);
            deserializer.Read(out this.fix_state);
            deserializer.Read(out this.vertical_accuracy);
            deserializer.Read(out this.horizontal_accuracy);
            deserializer.Read(out this.speed_accuracy);
            deserializer.Read(out this.num_gps_satellites_used);
            deserializer.Read(out this.num_glonass_satellites_used);
            deserializer.Read(out this.num_total_satellites_used);
            deserializer.Read(out this.gps_counter);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.horizontal_dop);
            serializer.Write(this.position_dop);
            serializer.Write(this.fix_state);
            serializer.Write(this.vertical_accuracy);
            serializer.Write(this.horizontal_accuracy);
            serializer.Write(this.speed_accuracy);
            serializer.Write(this.num_gps_satellites_used);
            serializer.Write(this.num_glonass_satellites_used);
            serializer.Write(this.num_total_satellites_used);
            serializer.Write(this.gps_counter);
        }

        public override string ToString()
        {
            return "GPSDetailsMsg: " +
            "\nheader: " + header.ToString() +
            "\nhorizontal_dop: " + horizontal_dop.ToString() +
            "\nposition_dop: " + position_dop.ToString() +
            "\nfix_state: " + fix_state.ToString() +
            "\nvertical_accuracy: " + vertical_accuracy.ToString() +
            "\nhorizontal_accuracy: " + horizontal_accuracy.ToString() +
            "\nspeed_accuracy: " + speed_accuracy.ToString() +
            "\nnum_gps_satellites_used: " + num_gps_satellites_used.ToString() +
            "\nnum_glonass_satellites_used: " + num_glonass_satellites_used.ToString() +
            "\nnum_total_satellites_used: " + num_total_satellites_used.ToString() +
            "\ngps_counter: " + gps_counter.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
