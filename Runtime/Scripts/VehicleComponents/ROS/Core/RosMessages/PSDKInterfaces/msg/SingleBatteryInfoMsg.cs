//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.PsdkInterfaces
{
    [Serializable]
    public class SingleBatteryInfoMsg : Message
    {
        public const string k_RosMessageName = "psdk_interfaces/SingleBatteryInfo";
        public override string RosMessageName => k_RosMessageName;

        public Std.HeaderMsg header;
        public byte battery_index;
        public float voltage;
        public float current;
        public float full_capacity;
        public float capacity_remain;
        public float capacity_percentage;
        public float temperature;
        public byte cell_count;
        public uint self_check_error;
        public uint closed_reason;
        public ushort abnormal_comm;
        public ushort is_embed;

        public SingleBatteryInfoMsg()
        {
            this.header = new Std.HeaderMsg();
            this.battery_index = 0;
            this.voltage = 0.0f;
            this.current = 0.0f;
            this.full_capacity = 0.0f;
            this.capacity_remain = 0.0f;
            this.capacity_percentage = 0.0f;
            this.temperature = 0.0f;
            this.cell_count = 0;
            this.self_check_error = 0;
            this.closed_reason = 0;
            this.abnormal_comm = 0;
            this.is_embed = 0;
        }

        public SingleBatteryInfoMsg(Std.HeaderMsg header, byte battery_index, float voltage, float current, float full_capacity, float capacity_remain, float capacity_percentage, float temperature, byte cell_count, uint self_check_error, uint closed_reason, ushort abnormal_comm, ushort is_embed)
        {
            this.header = header;
            this.battery_index = battery_index;
            this.voltage = voltage;
            this.current = current;
            this.full_capacity = full_capacity;
            this.capacity_remain = capacity_remain;
            this.capacity_percentage = capacity_percentage;
            this.temperature = temperature;
            this.cell_count = cell_count;
            this.self_check_error = self_check_error;
            this.closed_reason = closed_reason;
            this.abnormal_comm = abnormal_comm;
            this.is_embed = is_embed;
        }

        public static SingleBatteryInfoMsg Deserialize(MessageDeserializer deserializer) => new SingleBatteryInfoMsg(deserializer);

        private SingleBatteryInfoMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.battery_index);
            deserializer.Read(out this.voltage);
            deserializer.Read(out this.current);
            deserializer.Read(out this.full_capacity);
            deserializer.Read(out this.capacity_remain);
            deserializer.Read(out this.capacity_percentage);
            deserializer.Read(out this.temperature);
            deserializer.Read(out this.cell_count);
            deserializer.Read(out this.self_check_error);
            deserializer.Read(out this.closed_reason);
            deserializer.Read(out this.abnormal_comm);
            deserializer.Read(out this.is_embed);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.battery_index);
            serializer.Write(this.voltage);
            serializer.Write(this.current);
            serializer.Write(this.full_capacity);
            serializer.Write(this.capacity_remain);
            serializer.Write(this.capacity_percentage);
            serializer.Write(this.temperature);
            serializer.Write(this.cell_count);
            serializer.Write(this.self_check_error);
            serializer.Write(this.closed_reason);
            serializer.Write(this.abnormal_comm);
            serializer.Write(this.is_embed);
        }

        public override string ToString()
        {
            return "SingleBatteryInfoMsg: " +
            "\nheader: " + header.ToString() +
            "\nbattery_index: " + battery_index.ToString() +
            "\nvoltage: " + voltage.ToString() +
            "\ncurrent: " + current.ToString() +
            "\nfull_capacity: " + full_capacity.ToString() +
            "\ncapacity_remain: " + capacity_remain.ToString() +
            "\ncapacity_percentage: " + capacity_percentage.ToString() +
            "\ntemperature: " + temperature.ToString() +
            "\ncell_count: " + cell_count.ToString() +
            "\nself_check_error: " + self_check_error.ToString() +
            "\nclosed_reason: " + closed_reason.ToString() +
            "\nabnormal_comm: " + abnormal_comm.ToString() +
            "\nis_embed: " + is_embed.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
