//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.PsdkInterfaces
{
    [Serializable]
    public class GimbalRotationMsg : Message
    {
        public const string k_RosMessageName = "psdk_interfaces/GimbalRotation";
        public override string RosMessageName => k_RosMessageName;

        public byte payload_index = 1; //  see enum E_DjiMountPosition in dji_typedef.h
        public byte rotation_mode;
        //  see E_DjiGimbalRotationMode in dji_gimbal_manager.h 0 /*!< Incremental angle rotation mode, represents rotating gimbal specified angles based on current angles. */
        //  1, /*!< Absolute angle rotation mode, represents rotating gimbal to specified angles in the ground coordinate. */
        //  2  /*!< Speed rotation mode, specifies rotation speed of gimbal in the ground coordinate. */
        public float pitch;
        //  unit: radians
        public float roll;
        //  unit: radians
        public float yaw;
        //  unit: radians
        public float time;
        //  /*!< Expect execution time of gimbal rotation, unit: second. */

        public GimbalRotationMsg()
        {
            this.rotation_mode = 0;
            this.pitch = 0.0f;
            this.roll = 0.0f;
            this.yaw = 0.0f;
            this.time = 0.0f;
        }

        public GimbalRotationMsg(byte payload_index, byte rotation_mode, float pitch, float roll, float yaw, float time)
        {
            this.payload_index = payload_index;
            this.rotation_mode = rotation_mode;
            this.pitch = pitch;
            this.roll = roll;
            this.yaw = yaw;
            this.time = time;
        }

        public static GimbalRotationMsg Deserialize(MessageDeserializer deserializer) => new GimbalRotationMsg(deserializer);

        private GimbalRotationMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.payload_index);
            deserializer.Read(out this.rotation_mode);
            deserializer.Read(out this.pitch);
            deserializer.Read(out this.roll);
            deserializer.Read(out this.yaw);
            deserializer.Read(out this.time);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.payload_index);
            serializer.Write(this.rotation_mode);
            serializer.Write(this.pitch);
            serializer.Write(this.roll);
            serializer.Write(this.yaw);
            serializer.Write(this.time);
        }

        public override string ToString()
        {
            return "GimbalRotationMsg: " +
            "\npayload_index: " + payload_index.ToString() +
            "\nrotation_mode: " + rotation_mode.ToString() +
            "\npitch: " + pitch.ToString() +
            "\nroll: " + roll.ToString() +
            "\nyaw: " + yaw.ToString() +
            "\ntime: " + time.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
