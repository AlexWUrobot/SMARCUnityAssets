//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Smarc
{
    [Serializable]
    public class ThrusterFeedbackMsg : Message
    {
        public const string k_RosMessageName = "smarc_msgs/ThrusterFeedback";
        public override string RosMessageName => k_RosMessageName;

        public Std.HeaderMsg header;
        public ThrusterRPMMsg rpm;
        public ThrusterDCMsg dc;
        public float current;
        public float torque;

        public ThrusterFeedbackMsg()
        {
            this.header = new Std.HeaderMsg();
            this.rpm = new ThrusterRPMMsg();
            this.dc = new ThrusterDCMsg();
            this.current = 0.0f;
            this.torque = 0.0f;
        }

        public ThrusterFeedbackMsg(Std.HeaderMsg header, ThrusterRPMMsg rpm, ThrusterDCMsg dc, float current, float torque)
        {
            this.header = header;
            this.rpm = rpm;
            this.dc = dc;
            this.current = current;
            this.torque = torque;
        }

        public static ThrusterFeedbackMsg Deserialize(MessageDeserializer deserializer) => new ThrusterFeedbackMsg(deserializer);

        private ThrusterFeedbackMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            this.rpm = ThrusterRPMMsg.Deserialize(deserializer);
            this.dc = ThrusterDCMsg.Deserialize(deserializer);
            deserializer.Read(out this.current);
            deserializer.Read(out this.torque);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.rpm);
            serializer.Write(this.dc);
            serializer.Write(this.current);
            serializer.Write(this.torque);
        }

        public override string ToString()
        {
            return "ThrusterFeedbackMsg: " +
            "\nheader: " + header.ToString() +
            "\nrpm: " + rpm.ToString() +
            "\ndc: " + dc.ToString() +
            "\ncurrent: " + current.ToString() +
            "\ntorque: " + torque.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
