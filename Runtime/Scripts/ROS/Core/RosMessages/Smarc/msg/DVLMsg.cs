//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Smarc
{
    [Serializable]
    public class DVLMsg : Message
    {
        public const string k_RosMessageName = "smarc_msgs/DVL";
        public override string RosMessageName => k_RosMessageName;

        //  Copyright (c) 2016 The UUV Simulator Authors.
        //  All rights reserved.
        // 
        //  Licensed under the Apache License, Version 2.0 (the "License");
        //  you may not use this file except in compliance with the License.
        //  You may obtain a copy of the License at
        // 
        //      http://www.apache.org/licenses/LICENSE-2.0
        // 
        //  Unless required by applicable law or agreed to in writing, software
        //  distributed under the License is distributed on an "AS IS" BASIS,
        //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        //  See the License for the specific language governing permissions and
        //  limitations under the License.
        //  This is a message to hold data from a DVL sensor (Doppler Velocity Log).
        // 
        //  Distances are in [m], velocities in [m/s]
        // 
        //  If the covariance is known, it should be filled.
        //  If it is unknown, it should be set to all zeros.
        //  If a measurement was invalid, its covariance should be set to -1 so it can be
        //  disregarded.
        // 
        //  DVLBeams are optional. If they are set they contain individual ranges and 1D
        //  doppler velocity estimates orthogonal to the ray.
        public Std.HeaderMsg header;
        //  Measured velocity [m/s]
        public Geometry.Vector3Msg velocity;
        //  Row major, xyz axes
        public double[] velocity_covariance;
        //  Altitude of the vehicle
        public double altitude;
        public DVLBeamMsg[] beams;

        public DVLMsg()
        {
            this.header = new Std.HeaderMsg();
            this.velocity = new Geometry.Vector3Msg();
            this.velocity_covariance = new double[9];
            this.altitude = 0.0;
            this.beams = new DVLBeamMsg[0];
        }

        public DVLMsg(Std.HeaderMsg header, Geometry.Vector3Msg velocity, double[] velocity_covariance, double altitude, DVLBeamMsg[] beams)
        {
            this.header = header;
            this.velocity = velocity;
            this.velocity_covariance = velocity_covariance;
            this.altitude = altitude;
            this.beams = beams;
        }

        public static DVLMsg Deserialize(MessageDeserializer deserializer) => new DVLMsg(deserializer);

        private DVLMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            this.velocity = Geometry.Vector3Msg.Deserialize(deserializer);
            deserializer.Read(out this.velocity_covariance, sizeof(double), 9);
            deserializer.Read(out this.altitude);
            deserializer.Read(out this.beams, DVLBeamMsg.Deserialize, deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.velocity);
            serializer.Write(this.velocity_covariance);
            serializer.Write(this.altitude);
            serializer.WriteLength(this.beams);
            serializer.Write(this.beams);
        }

        public override string ToString()
        {
            return "DVLMsg: " +
            "\nheader: " + header.ToString() +
            "\nvelocity: " + velocity.ToString() +
            "\nvelocity_covariance: " + System.String.Join(", ", velocity_covariance.ToList()) +
            "\naltitude: " + altitude.ToString() +
            "\nbeams: " + System.String.Join(", ", beams.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
