//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Smarc
{
    [Serializable]
    public class SidescanMsg : Message
    {
        public const string k_RosMessageName = "smarc_msgs/Sidescan";
        public override string RosMessageName => k_RosMessageName;

        public Std.HeaderMsg header;
        public byte type;
        //  Packet Type, 0xE2 = Sonar 8 Bit
        public uint time;
        //  Ping time   [100 us]
        public byte frequency_id;
        //  Freq Id, currently 0x00
        public short gain;
        public ushort decimation;
        public float max_duration;
        //  Max travel time of outermost bins (s)
        public byte[] port_channel;
        public byte[] starboard_channel;
        public byte[] port_channel_angle_high;
        public byte[] port_channel_angle_low;
        public byte[] starboard_channel_angle_high;
        public byte[] starboard_channel_angle_low;
        public byte[] extra_channel;

        public SidescanMsg()
        {
            this.header = new Std.HeaderMsg();
            this.type = 0;
            this.time = 0;
            this.frequency_id = 0;
            this.gain = 0;
            this.decimation = 0;
            this.max_duration = 0.0f;
            this.port_channel = new byte[0];
            this.starboard_channel = new byte[0];
            this.port_channel_angle_high = new byte[0];
            this.port_channel_angle_low = new byte[0];
            this.starboard_channel_angle_high = new byte[0];
            this.starboard_channel_angle_low = new byte[0];
            this.extra_channel = new byte[0];
        }

        public SidescanMsg(Std.HeaderMsg header, byte type, uint time, byte frequency_id, short gain, ushort decimation, float max_duration, byte[] port_channel, byte[] starboard_channel, byte[] port_channel_angle_high, byte[] port_channel_angle_low, byte[] starboard_channel_angle_high, byte[] starboard_channel_angle_low, byte[] extra_channel)
        {
            this.header = header;
            this.type = type;
            this.time = time;
            this.frequency_id = frequency_id;
            this.gain = gain;
            this.decimation = decimation;
            this.max_duration = max_duration;
            this.port_channel = port_channel;
            this.starboard_channel = starboard_channel;
            this.port_channel_angle_high = port_channel_angle_high;
            this.port_channel_angle_low = port_channel_angle_low;
            this.starboard_channel_angle_high = starboard_channel_angle_high;
            this.starboard_channel_angle_low = starboard_channel_angle_low;
            this.extra_channel = extra_channel;
        }

        public static SidescanMsg Deserialize(MessageDeserializer deserializer) => new SidescanMsg(deserializer);

        private SidescanMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.type);
            deserializer.Read(out this.time);
            deserializer.Read(out this.frequency_id);
            deserializer.Read(out this.gain);
            deserializer.Read(out this.decimation);
            deserializer.Read(out this.max_duration);
            deserializer.Read(out this.port_channel, sizeof(byte), deserializer.ReadLength());
            deserializer.Read(out this.starboard_channel, sizeof(byte), deserializer.ReadLength());
            deserializer.Read(out this.port_channel_angle_high, sizeof(byte), deserializer.ReadLength());
            deserializer.Read(out this.port_channel_angle_low, sizeof(byte), deserializer.ReadLength());
            deserializer.Read(out this.starboard_channel_angle_high, sizeof(byte), deserializer.ReadLength());
            deserializer.Read(out this.starboard_channel_angle_low, sizeof(byte), deserializer.ReadLength());
            deserializer.Read(out this.extra_channel, sizeof(byte), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.type);
            serializer.Write(this.time);
            serializer.Write(this.frequency_id);
            serializer.Write(this.gain);
            serializer.Write(this.decimation);
            serializer.Write(this.max_duration);
            serializer.WriteLength(this.port_channel);
            serializer.Write(this.port_channel);
            serializer.WriteLength(this.starboard_channel);
            serializer.Write(this.starboard_channel);
            serializer.WriteLength(this.port_channel_angle_high);
            serializer.Write(this.port_channel_angle_high);
            serializer.WriteLength(this.port_channel_angle_low);
            serializer.Write(this.port_channel_angle_low);
            serializer.WriteLength(this.starboard_channel_angle_high);
            serializer.Write(this.starboard_channel_angle_high);
            serializer.WriteLength(this.starboard_channel_angle_low);
            serializer.Write(this.starboard_channel_angle_low);
            serializer.WriteLength(this.extra_channel);
            serializer.Write(this.extra_channel);
        }

        public override string ToString()
        {
            return "SidescanMsg: " +
            "\nheader: " + header.ToString() +
            "\ntype: " + type.ToString() +
            "\ntime: " + time.ToString() +
            "\nfrequency_id: " + frequency_id.ToString() +
            "\ngain: " + gain.ToString() +
            "\ndecimation: " + decimation.ToString() +
            "\nmax_duration: " + max_duration.ToString() +
            "\nport_channel: " + System.String.Join(", ", port_channel.ToList()) +
            "\nstarboard_channel: " + System.String.Join(", ", starboard_channel.ToList()) +
            "\nport_channel_angle_high: " + System.String.Join(", ", port_channel_angle_high.ToList()) +
            "\nport_channel_angle_low: " + System.String.Join(", ", port_channel_angle_low.ToList()) +
            "\nstarboard_channel_angle_high: " + System.String.Join(", ", starboard_channel_angle_high.ToList()) +
            "\nstarboard_channel_angle_low: " + System.String.Join(", ", starboard_channel_angle_low.ToList()) +
            "\nextra_channel: " + System.String.Join(", ", extra_channel.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
