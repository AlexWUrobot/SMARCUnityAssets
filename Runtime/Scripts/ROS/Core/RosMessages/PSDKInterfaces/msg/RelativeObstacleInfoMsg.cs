//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.PsdkInterfaces
{
    [Serializable]
    public class RelativeObstacleInfoMsg : Message
    {
        public const string k_RosMessageName = "psdk_interfaces/RelativeObstacleInfo";
        public override string RosMessageName => k_RosMessageName;

        public Std.HeaderMsg header;
        public float down;
        //  distance from obstacle (m) 
        public float front;
        //  distance from obstacle (m) 
        public float right;
        //  distance from obstacle (m) 
        public float back;
        //  distance from obstacle (m) 
        public float left;
        //  distance from obstacle (m) 
        public float up;
        //  distance from obstacle (m) 
        public byte down_health;
        //  Down sensor flag: 0 - not working, 1 - working 
        public byte front_health;
        //  Front sensor flag: 0 - not working, 1 - working 
        public byte right_health;
        //  Right sensor flag: 0 - not working, 1 - working 
        public byte back_health;
        //  Back sensor flag: 0 - not working, 1 - working 
        public byte left_health;
        //  Left sensor flag: 0 - not working, 1 - working 
        public byte up_health;
        //  Up sensor health flag: 0 - not working, 1 - working 
        public byte reserved;
        //  Reserved sensor health flag

        public RelativeObstacleInfoMsg()
        {
            this.header = new Std.HeaderMsg();
            this.down = 0.0f;
            this.front = 0.0f;
            this.right = 0.0f;
            this.back = 0.0f;
            this.left = 0.0f;
            this.up = 0.0f;
            this.down_health = 0;
            this.front_health = 0;
            this.right_health = 0;
            this.back_health = 0;
            this.left_health = 0;
            this.up_health = 0;
            this.reserved = 0;
        }

        public RelativeObstacleInfoMsg(Std.HeaderMsg header, float down, float front, float right, float back, float left, float up, byte down_health, byte front_health, byte right_health, byte back_health, byte left_health, byte up_health, byte reserved)
        {
            this.header = header;
            this.down = down;
            this.front = front;
            this.right = right;
            this.back = back;
            this.left = left;
            this.up = up;
            this.down_health = down_health;
            this.front_health = front_health;
            this.right_health = right_health;
            this.back_health = back_health;
            this.left_health = left_health;
            this.up_health = up_health;
            this.reserved = reserved;
        }

        public static RelativeObstacleInfoMsg Deserialize(MessageDeserializer deserializer) => new RelativeObstacleInfoMsg(deserializer);

        private RelativeObstacleInfoMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.down);
            deserializer.Read(out this.front);
            deserializer.Read(out this.right);
            deserializer.Read(out this.back);
            deserializer.Read(out this.left);
            deserializer.Read(out this.up);
            deserializer.Read(out this.down_health);
            deserializer.Read(out this.front_health);
            deserializer.Read(out this.right_health);
            deserializer.Read(out this.back_health);
            deserializer.Read(out this.left_health);
            deserializer.Read(out this.up_health);
            deserializer.Read(out this.reserved);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.down);
            serializer.Write(this.front);
            serializer.Write(this.right);
            serializer.Write(this.back);
            serializer.Write(this.left);
            serializer.Write(this.up);
            serializer.Write(this.down_health);
            serializer.Write(this.front_health);
            serializer.Write(this.right_health);
            serializer.Write(this.back_health);
            serializer.Write(this.left_health);
            serializer.Write(this.up_health);
            serializer.Write(this.reserved);
        }

        public override string ToString()
        {
            return "RelativeObstacleInfoMsg: " +
            "\nheader: " + header.ToString() +
            "\ndown: " + down.ToString() +
            "\nfront: " + front.ToString() +
            "\nright: " + right.ToString() +
            "\nback: " + back.ToString() +
            "\nleft: " + left.ToString() +
            "\nup: " + up.ToString() +
            "\ndown_health: " + down_health.ToString() +
            "\nfront_health: " + front_health.ToString() +
            "\nright_health: " + right_health.ToString() +
            "\nback_health: " + back_health.ToString() +
            "\nleft_health: " + left_health.ToString() +
            "\nup_health: " + up_health.ToString() +
            "\nreserved: " + reserved.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
