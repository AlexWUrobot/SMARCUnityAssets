//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.SmarcMission
{
    [Serializable]
    public class MissionControlMsg : Message
    {
        public const string k_RosMessageName = "smarc_mission_msgs/MissionControl";
        public override string RosMessageName => k_RosMessageName;

        //  name of the plan
        public string name;
        //  a hash derived frm this entire message. optional.
        public string hash;
        //  a timeout in seconds, in which the vehicle should stop
        //  doing what this mission control message wants it to do
        //  after trying for this many seconds
        public ulong timeout;
        //  start or stop the current plan
        //  stop will stop and delete the plan
        //  pause will stop the execution, but not delete it
        //  start either starts a new plan or continues a paused one
        public const byte CMD_START = 0;
        public const byte CMD_STOP = 1;
        public const byte CMD_PAUSE = 2;
        //  one-way stop button. no plan should be started
        //  after this is received
        public const byte CMD_EMERGENCY = 3;
        //  re-set the plan with the given waypoints
        public const byte CMD_SET_PLAN = 4;
        //  to indicate that this is just feedback
        public const byte CMD_IS_FEEDBACK = 5;
        //  to specifically request a feedback message
        public const byte CMD_REQUEST_FEEDBACK = 6;
        public byte command;
        //  corresponding to each command
        public const byte FB_RUNNING = 0;
        public const byte FB_STOPPED = 1;
        public const byte FB_PAUSED = 2;
        public const byte FB_EMERGENCY = 3;
        public const byte FB_RECEIVED = 4;
        public const byte FB_COMPLETED = 5;
        public byte plan_state;
        //  and some extra string, because why not
        public string feedback_str;
        //  if the cmd is set plan, then this should contain the waypoints
        //  to follow, otherwise ignored
        public GotoWaypointMsg[] waypoints;

        public MissionControlMsg()
        {
            this.name = "";
            this.hash = "";
            this.timeout = 0;
            this.command = 0;
            this.plan_state = 0;
            this.feedback_str = "";
            this.waypoints = new GotoWaypointMsg[0];
        }

        public MissionControlMsg(string name, string hash, ulong timeout, byte command, byte plan_state, string feedback_str, GotoWaypointMsg[] waypoints)
        {
            this.name = name;
            this.hash = hash;
            this.timeout = timeout;
            this.command = command;
            this.plan_state = plan_state;
            this.feedback_str = feedback_str;
            this.waypoints = waypoints;
        }

        public static MissionControlMsg Deserialize(MessageDeserializer deserializer) => new MissionControlMsg(deserializer);

        private MissionControlMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.name);
            deserializer.Read(out this.hash);
            deserializer.Read(out this.timeout);
            deserializer.Read(out this.command);
            deserializer.Read(out this.plan_state);
            deserializer.Read(out this.feedback_str);
            deserializer.Read(out this.waypoints, GotoWaypointMsg.Deserialize, deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.name);
            serializer.Write(this.hash);
            serializer.Write(this.timeout);
            serializer.Write(this.command);
            serializer.Write(this.plan_state);
            serializer.Write(this.feedback_str);
            serializer.WriteLength(this.waypoints);
            serializer.Write(this.waypoints);
        }

        public override string ToString()
        {
            return "MissionControlMsg: " +
            "\nname: " + name.ToString() +
            "\nhash: " + hash.ToString() +
            "\ntimeout: " + timeout.ToString() +
            "\ncommand: " + command.ToString() +
            "\nplan_state: " + plan_state.ToString() +
            "\nfeedback_str: " + feedback_str.ToString() +
            "\nwaypoints: " + System.String.Join(", ", waypoints.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
